{
  "welcomeToUse": "欢迎使用",
  "desc": "想使用一套技术栈开发全栈web项目？或许你可以试试 NextJS ，但我认为 NextJS 只适合用来写需要 ssr 的客户端，使用其写 api 接口缺少很多开箱即用的功能，不如NestJS，同时如果后台管理系统也写在ssr框架里也没有直接写单页面项目那么丝滑。既然如此，那我们全都要！这是一套web全栈项目的开发模板，包含客户端（NextJS），后台管理端（React + Vite）和服务端（NestJS）代码，三端均使用 Typescript 进行开发，并用 nx 进行了 monorepo 化的同构开发，这样前后端均可以使用一些公用逻辑，具体可以点击下方查看 Github 仓库。",
  "github": "Github 仓库",
  "projectManager": "项目管理器",
  "projectManagerDesc": "使用nx去管理整个项目代码，让前后端的代码可以进行同构，并且可以通过它去一键启动整个项目。",
  "client": "客户端",
  "clientDesc": "客户端可能需要 seo 的功能，所以默认直接使用 nextjs 去构建。",
  "managementEnd": "后台管理端",
  "managementEndDesc": "后台管理系统大部分页面不需要做 seo，直接使用 React + Vite 去构建的单页面应用。",
  "server": "服务端",
  "serverEnd": "服务端使用 nestjs 构建，使用它构建 api 比用 nextjs 能够提供更加多开箱即用的功能。",
  "quickStart": "快速开始",
  "mode1": "方式一",
  "goDirectlyTo": "直接前往",
  "downloadTheProjectLocally": "下载项目到本地。",
  "mode2": "方式二",
  "installAndDownloadTools": "安装下载工具",
  "toolsDesc1": "安装好后，用 ying 执行 crt 命令，后面接上项目名称。",
  "projectName": "项目名称",
  "toolsDesc2": "使用默认用户名，随后选择 ying-starter 项目即可。",
  "toolsDesc3": "请输入 Github 用户名 JackDeng666",
  "toolsDesc4": "请选择仓库 ying-starter",
  "frequentlyAskedQuestion": "常见问题",
  "question1": "1.修改了代码移动了文件的时候会经常报错（比如xxx project graph等报错）？",
  "answer1": "删除根目录下的.nx、tmp文件夹，随后重启即可。"
}
